<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
    <channel>
        <title>Luca Nils Schmid - Blog</title>
        <link>https://lucaschmid.net/feed/rss.xml</link>
        <atom:link href="https://lucaschmid.net/feed/rss.xml" rel="self">
        </atom:link>
        <description>My name is Luca Nils Schmid. This is my portfolio.</description>
        <generator>Handmade by Luca Nils Schmid</generator>
        <language>en-GB</language>
        <lastBuildDate>Wed, 30 Dec 2015 21:10:30 GMT</lastBuildDate>
        <item>
            <title>Let&apos;s encrypt Express</title>
            <guid>https://lucaschmid.net/anotherblog/letsencrypt-express</guid>
            <author>Luca Nils Schmid &lt;allspamhere@kriegslustig.me&gt;</author>
            <content:encoded><![CDATA[<h1 id="letsencryptexpress0"><a href="https://lucaschmid.net/anotherblog/letsencrypt-express">Let's encrypt Express</a></h1>

<p>Since <a href="https://letsencrypt.org/"><em>Let's Encrypt</em></a> will be coming out <a href="https://letsencrypt.org/2015/11/12/public-beta-timing.html">soon</a>, I thought I'd try it on my Site. <em>Let's Encrypts</em> infrastructure is actually fully operational already. They still label it as being in beta, because the client has some (<a href="https://github.com/letsencrypt/letsencrypt/issues">around 400</a>) bugs. My Site runs on Node.js using Express on <a href="https://alpinelinux.org/"><em>Alpine Linux</em></a>. The guide should work on pretty much any Linux system, since both <em>Node.js</em> and <em>Let's Encrypt</em> are made to be as cross-platform-compatible as possible.</p>

<p>I'll be covering three things in this guide. <strong>Requesting the certificate</strong>, <strong>Installing it to the Express app</strong> and <strong>A simple Express app running over TLS</strong>.</p>

<h2 id="requestingthecertificate">Requesting the certificate</h2>

<p>First of all lets get our certificate. I basically just followed the <a href="https://github.com/letsencrypt/letsencrypt/blob/master/README.rst">README inside Let's Encrypt's Github repo</a>.</p>

<p>We'll need to install the utility. This will become easier once it's released as stable. You'll then be able to use your package-manager.</p>

<pre><code>git clone https://github.com/letsencrypt/letsencrypt
cd letsencrypt
./letsencrypt-auto --help
</code></pre>

<p>Then we can request the certificate. Here's what I did for this site.</p>

<pre><code>./letsencrypt-auto certonly --standalone --email not_an_email_address@lucaschmid.net -d lucaschmid.net
</code></pre>

<p>This threw an error on my server because I had IPv6 enabled. If <a href="https://github.com/letsencrypt/boulder/issues/1046">this issue</a> hasn't been resolved yet, <strong>you might need to do deactivate IPv6</strong>, before running the last command.</p>

<pre><code>sysctl -w net.ipv6.conf.all.disable_ipv6=1
</code></pre>

<p>When you now run the last command again, you should recieve the certificate. After that, you can enable IPv6 again.</p>

<pre><code>sysctl -w net.ipv6.conf.all.disable_ipv6=0
</code></pre>

<h2 id="installingthecertificatetotheexpressapp">Installing the certificate to the Express app</h2>

<p>Inside my app's directory I created a directory called <code>tls</code>. I then created some symlinks for the certificate and the key.</p>

<pre><code>mkdir tls
cd tls
ln -s /etc/letsencrypt/live/lucaschmid.net/cert.pem
ln -s /etc/letsencrypt/live/lucaschmid.net/privkey.pem key.pem
</code></pre>

<p><em>I'm using Docker to run this site, so the symlinks won't work inside the container. To fix this, I had to make copies of the files instead of only symlinking them. This has the disadvantage of Letâ€™s Encrypt not being able to manage them. The certificates have a pretty short lifetime (3 months), letsencrypt could renew them itself.</em></p>

<h2 id="asimpleexpressapprunningovertls">A simple Express app running over TLS</h2>

<p>Now we can integrate the <code>https</code> module into our Express server. Here's a simple example:</p>

<pre><code>var express = require('express')
var fs = require('fs')
var https = require('https')

var ports = process.env.NODE_ENV === 'production'
  ? [80, 443]
  : [3442, 3443]

var app = express()

var server = https.createServer(
  {
    key: fs.readFileSync('./tls/key.pem'),
    cert: fs.readFileSync('./tls/cert.pem')
  },
  app
)

server.listen(ports[1][7])
app.listen(ports[0])

app.use('/', (req, res) =\&gt; {
  res.end('Hi')
})
</code></pre>

<p>This script simply serves 'Hi' on all routes both over HTTP and HTTPS. It might be a good idea to redirect HTTP to HTTPS. I just wanted to keep it as simple as possible here.</p>

<p>When you run this and go to your Website via HTTPS, you should see something like this:
<img src="https://lucaschmid.net/_img/certificate.png" alt="Image of the certificate opened in Firefox" /></p>

<p>Now go on!</p>

<p><strong>ENCRYPT ALL THE THINGS!!</strong></p>]]></content:encoded>
            <description>Since Let&apos;s Encrypt will be coming out soon, I thought I&apos;d try it on my Site. Let&apos;s Encrypts infrastructure is actually fully operational already. They still label it as being in beta, because the client has some (around 400) bugs. My Site runs on Node.js using Express on Alpine Linux. The guide should work on pretty much any Linux system, since both Node.js and Let&apos;s Encrypt are made to be as cross-platform-compatible as possible.</description>
        </item>
    </channel>
</rss>